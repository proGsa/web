[project]
name = "ppo"
version = "0.0.1"
description = "tourist application"
authors = [
    {name = "Nastya Lobach",email = "nastya@lobach.info"}
]
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "pydantic[email] (>=2.10.6,<3.0.0)",
    "email-validator (>=2.2.0,<3.0.0)",
    "sqlalchemy[asyncio] (>=2.0.40,<3.0.0)",
    "psycopg2-binary (>=2.9.10,<3.0.0)",
    "asyncpg (>=0.30.0,<0.31.0)",
    "pytest-asyncio (>=0.26.0,<0.27.0)",
    "fastapi (>=0.115.12,<0.116.0)",
    "jinja2 (>=3.1.6,<4.0.0)",
    "uvicorn (>=0.34.1,<0.35.0)",
    "pydantic-settings (>=2.9.1,<3.0.0)",
    "passlib (==1.7.4)",
    "pycryptodome (>=3.22.0,<4.0.0)",
    "python-jose[cryptography] (>=3.4.0,<4.0.0)",
    "python-multipart (>=0.0.20,<0.0.21)",
    "bcrypt (==4.1.2)",
    "pytest (>=8.3.5,<9.0.0)",
    "pymongo (>=4.13.0,<5.0.0)",
    "motor (>=3.7.1,<4.0.0)",
]

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
python_version = "3.13"
ignore_missing_imports = false
strict = true
mypy_path = "src" 

plugins = [
"pydantic.mypy"
]
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
no_implicit_reexport = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

[[tool.mypy.overrides]]
module = [
    "dynaconf",
    "keycloak",
    "scipy.*",
    "prometheus_api_client",
    "clearml",
    "matplotlib",
    "yaml",
    "atlassian",
    "urllib3.*",
    "google.protobuf.*",
    "requests.*",
    "kubernetes_asyncio.*",
    "tritonclient.*",
    "aiohttp.*",
    "pandas",
    "tqdm.*",
    "sklearn.*",
    "lxml.*",
    "apscheduler.*",
    "ffmpeg.*",
    "jiwer.*",
    "clickhouse_connect.*",
    "pydub.*",
    "opensearchpy.*"
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "proto_source.google.*"
]
disable_error_code = [
    "attr-defined",
    "name-defined",
    "import",
    "no-untyped-def",
    "arg-type",
    "type-arg",
    "var-annotated",
    "misc"
]


[tool.ruff]
target-version = "py313"
line-length = 120
exclude = [
    "config/*", "data/*", "reports/*", "schedule_params/*"
]

[tool.ruff.lint]
preview = true
select = [
    "A",    # flake8-builtins
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "ERA",  # flake8-eradicate/eradicate
    "RET",  # flake8-return
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    "ANN",  # flake8-annotations
    "PIE",  # flake8-pie
    "PLR",  # Pylint
    "I",    # isort
    "N",    # pep8-naming
    "E",    # black
    "PGH",  # pygrep
    "RUF",  # ruff checks
    "F",    # enable pyflakes
    "UP",   # pyupgrade
    "C901"  # cyclomatic complexity limit
]
ignore = [
    "E501",
    "PGH003",
    "ERA001",
    "RUF001",
    "RUF029",
    "B904",   # just ignore use 'raise ... from err'
    "B905",   # just ingore use explicit 'strict=' parameter with 'zip()'
    "N818",   # just ignore Exception name should be named with an Error suffix
    "UP035",  # just ignore use typing instead collections.abc
    "A005", # just ignore shadows a Python standard-library module
    "RUF006", # just ignore store a reference to the return value of `asyncio.create_task`
    "ANN204", # allow no annotation in result of __init__ and other magic methods
    "ANN401", # allow Any to build composite types and pass *args, **kwargs
    "PLR0904", # allowed to use any number of public methods
    "PLR0914" # allowed to use any number of local variables
]
unfixable = [
    "ERA", # do not autoremove commented out code
]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.isort]
force-single-line = true
lines-between-types = 1
lines-after-imports = 2
required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.pylint]
# check defaults in https://docs.astral.sh/ruff/settings/#lintpylint
max-args = 10
max-returns = 10
max-branches = 25
max-statements = 75
max-nested-blocks = 10

[tool.ruff.lint.flake8-type-checking]
exempt-modules = ["typing", "typing_extensions"]

[tool.ruff.format]
exclude = ["*.pyi"]

[tool.ruff.lint.mccabe]
# check defaults in https://docs.astral.sh/ruff/settings/#lint_mccabe_max-complexity
max-complexity = 20

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.5"
ruff = "^0.11.0"
mypy = "^1.15.0"
sqlalchemy-stubs = "^0.4"
pytest-asyncio = "^0.26.0"
types-python-jose = "^3.4.0.20250224"
types-passlib = "^1.7.7.20250408"

[tool.poetry]
name = "ppo"
version = "0.0.1"
description = "tourist application"
authors = ["Nastya Lobach <nastya@lobach.info>"]
readme = "README.md"
packages = [{ include = "src" }]

[tool.poetry.dependencies]
python = "^3.13"
pydantic = { version = ">=2.10.6,<3.0.0", extras = ["email"] }
email-validator = ">=2.2.0,<3.0.0"
sqlalchemy = { version = ">=2.0.40,<3.0.0", extras = ["asyncio"] }
asyncpg = ">=0.30.0,<0.31.0"
pytest-asyncio = ">=0.26.0,<0.27.0"
fastapi = ">=0.115.12,<0.116.0"
jinja2 = ">=3.1.6,<4.0.0"
uvicorn = ">=0.34.1,<0.35.0"
passlib = {extras = ["bcrypt"], version = ">=1.7.4,<2.0.0"}
bcrypt = "==4.1.2"
